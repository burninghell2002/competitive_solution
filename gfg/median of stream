#include <bits/stdc++.h>
using namespace std;



 // } Driver Code Ends
class Solution
{      
    public:
    //Function to insert heap.
    priority_queue<int>maxHeap;
        priority_queue<int,vector<int>,greater<int>>minHeap;
    void insertHeap(int &x)
    {
        if(maxHeap.empty()){
            maxHeap.push(x);
        }
        else{
            if(maxHeap.size() == minHeap.size()){
                 if(x > minHeap.top()){
                     int temp = minHeap.top();
                     minHeap.pop();
                     minHeap.push(x);
                     maxHeap.push(temp);
                 }
                 else{
                     maxHeap.push(x);
                 }
            }
            else{
                if(x < maxHeap.top()){
                    int temp = maxHeap.top();
                    maxHeap.pop();
                    maxHeap.push(x);
                    minHeap.push(temp);
                }
                else{
                    minHeap.push(x);
                }
            }
        }
        
    }
    
    void balanceHeaps()
    {
        
    }
    
    //Function to return Median.
    double getMedian()
    {
        if((maxHeap.size()+minHeap.size()) % 2 == 0){
            return double(minHeap.top()+maxHeap.top())/2;
        }
        else{
            return double(maxHeap.top());
        }
        
    }
};


// { Driver Code Starts.

int main()
{
    int n, x;
    int t;
    cin>>t;
    while(t--)
    {
    	Solution ob;
    	cin >> n;
    	for(int i = 1;i<= n; ++i)
    	{
    		cin >> x;
    		ob.insertHeap(x);
    	    cout << floor(ob.getMedian()) << endl;
    	}
    }
	return 0;
}  // } Driver Code Ends
