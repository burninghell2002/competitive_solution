#include <bits/stdc++.h>
using namespace std;


 // } Driver Code Ends
class Solution{
  public:
    // arr[]: Input Array
    // N : Size of the Array arr[]
    // Function to count inversions in the array.
    long long int merge(long long arr[],long long  low,long long mid,long long high){
        
        long long i = low;
        long long  j = mid+1;
        long long int  count = 0;
        vector<long long>temp;
        
        while(i<=mid && j <= high){
            if(arr[i] <= arr[j]){
               temp.push_back(arr[i]);
               i++;
            }
            else if(arr[j] < arr[i]){
               
                temp.push_back(arr[j]);
                j++;
                 count += (mid - i) +1 ;
            }
        
        }
        
        if(i <= mid){
            for(int k = i;k<=mid;k++){
                temp.push_back(arr[k]);
            }  
        }
        else if(j <= high){
            for(int k = j;k<=high;k++){
                temp.push_back(arr[k]);
            }
        }
        
        long long  k = 0;
        for(int i = low;i<=high;i++){
            arr[i] = temp[k];
            k++;
        }
       
       return count; 
    }
    
    long long int mergeSort(long long arr[],long long low ,long long high){
    
        if(high == low){
          return 0;
        }
       
           
         long long  mid =  (high+low)/2;
         
         long long int count = 0;
           
         count += mergeSort(arr,low,mid);
         count += mergeSort(arr,mid+1,high);
         count += merge(arr,low,mid,high);
           
      return count;  
    }
    
    long long int inversionCount(long long arr[], long long N)
    {
          int count = 0; 
          return mergeSort(arr,0,N-1);
    }

};

// { Driver Code Starts.

int main() {
    
    long long T;
    cin >> T;
    
    while(T--){
        long long N;
        cin >> N;
        
        long long A[N];
        for(long long i = 0;i<N;i++){
            cin >> A[i];
        }
        Solution obj;
        cout << obj.inversionCount(A,N) << endl;
    }
    
    return 0;
}
  // } Driver Code Ends
